    # def build_relatex(self, var, original=True):
    #     exps        = self.parse_orig() if original else self.sym_solve(var)
    #     unknown     = self.fetch_unknown(var)
    #     # sym_mapping = self.build_sym_mapping()
    #     fns_mapping = {Symbol(field.symbol): field.symbol_u for field in self.variables.all()}

    #     RHS = latex(exps if original else exps[0][unknown], symbol_names=fns_mapping, mul_symbol='dot')
    #     relatex = rf"{fns_mapping[unknown]} = " + rf"{RHS}"
    #     return relatex
    
    # def build_relatex_soln(self, var, in_map=None):
    #     nsoln = self.numeric_solve(var, in_map)
        
    #     exps        = self.sym_solve(var)
    #     unknown     = self.fetch_unknown(var)
    #     fns_mapping = {Symbol(field.symbol): field.symbol_u for field in self.variables.all()}

    #     smap = {}
    #     for k, v in in_map.items():
    #         syk       = Symbol(k)
    #         smap[syk] = str(np.float64(v))

    #     RHS = latex(exps if in_map is None else exps[0][unknown], symbol_names=smap, mul_symbol='dot')
    #     relatex = rf"{fns_mapping[unknown]} = " + rf"{RHS} = {nsoln:.3f}"
    #     return relatex

    # def build_num_mapping(self):
    #     return {Symbol(field.symbol): field.value for field in (self.variables.exclude(value=None))}

    # def symbol_reducer(self, symbol_list):
    #     return reduce(lambda x, y: x + ' ' + y, symbol_list)

    # def symbol_strgen(self, exclude=False):
    #     field_list = self.variables.all()
    #     # field_list = self.variables.exclude(value=None) if exclude else self.variables.all()

    #     sym_list = [var.symbol for var in field_list]
    #     return self.symbol_reducer(sym_list)
    
    # def build_sym_list(self, exclude=False):
    #     sym_str = self.symbol_strgen(exclude)

    #     symPy_sym_k = symbols(sym_str)
    #     return symPy_sym_k
        
    # def build_sym_mapping(self, exclude=False):
    #     # f_mapping = {f"{Symbol(field.symbol)}": field.symbol_u for field in (self.variables.exclude(value=None) if exclude else self.variables.all())}
    #     f_mapping = {rf"{Symbol(field.symbol)}": rf"{field.symbol_u}" for field in self.variables.all()}
    #     return f_mapping

    # def parse_orig(self):
    #   return parse_latex(rf"{self.LaTeX_repr}")

    # smap = {}
    # TOCONSIDER comprehension?
    # for k, v in input_map.items():
    #     syk = Symbol(k)
    #     smap[syk] = np.float64(v)

    # # call indirect 
    # def parse_simple(self):
    #     return parse_latex(rf"{self.simple_repr}")